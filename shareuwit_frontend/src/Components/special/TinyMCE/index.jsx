import React, { Component } from 'react'
import api from '../../../api';
import getUserInfo from '../../../utils/getUserInfo';
import {APP_API_URL} from '../../../baseConfig'

import Grid from '@mui/material/Unstable_Grid2';
import Box from '@mui/material/Box';
import Toolbar from '@mui/material/Toolbar';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';
import Fab from '@mui/material/Fab';
import Stack from '@mui/material/Stack';
import PublishIcon from '@mui/icons-material/Publish';
import SaveIcon from '@mui/icons-material/Save';

import { Editor } from '@tinymce/tinymce-react'

//Ê∂àÊÅØÊèêÈÜí
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';


//ÈîôËØØ‰ø°ÊÅØÊèêÈÜí
const notifyErr = (msg) => toast.warn('üò≤' + 'üò≤' + msg + 'üò≤' + 'üò≤', {
    position: "top-right",
    autoClose: 5000,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
    progress: undefined,
});

//ÊàêÂäü‰ø°ÊÅØÊèêÈÜí
const notifyRes = (msg) => toast(msg, {
  position: "top-right",
  autoClose: 5000,
  hideProgressBar: false,
  closeOnClick: true,
  pauseOnHover: true,
  draggable: true,
  progress: undefined,
});

export default class editorComponent extends Component {
  state = {
    title:'',
    content:'',
    article_status:false,
    current_uuid:'',
    saveState:false,
  }
  
  handleTitleChange = (event) => {
    this.setState({saveState:false});
    this.setState({title:event.target.value});
  }
  
  handleEditorChange = (content, editor) => {
    this.setState({saveState:false});
    this.setState({content:content});
  };

  // ÊñáÁ´†‰øùÂ≠òÈÄªËæë
  onSave = async() => {
    //Á°ÆËÆ§Âπ∂Âà∑Êñ∞Áî®Êà∑ÁöÑ‰ø°ÊÅØ
    const accessToken = localStorage.getItem('access_token');
    //È™åËØÅÂΩìÂâçÁî®Êà∑‰ø°ÊÅØÊòØÂê¶ÊúâÊïà
    await getUserInfo(accessToken);
    //ÂàõÂª∫ÂΩìÂâçarticleÂØπË±°
    const {title, content} = this.state;
    //Êú¨Â§ÑÂ∞Üarticle_status‰øÆÊîπ‰∏∫falseÔºåÂç≥‰øùÂ≠òÁöÑËçâÁ®ø
    const articleObj = {title:title, content:content, article_status:false};
    //Ê£ÄÊü•uuidÊòØÂê¶Â≠òÂú®Ôºå‰∏çÂ≠òÂú®ÂàôÊâßË°å‰øùÂ≠òÔºåÂ≠òÂú®ÂàôÊâßË°åÊõ¥Êñ∞
    if (localStorage.getItem('current_uuid')) {
      api.updateArticle(articleObj,localStorage.getItem('current_uuid'))
      .then(res => {
        this.setState({saveState:true});
        {notifyRes('‰øùÂ≠òÊàêÂäü')};
      })
      .catch(err => {
        {notifyErr(err.message)};
      })
    } else {
      api.publishArticle(articleObj)
      .then(res => {
        //‰øùÂ≠òÊàêÂäüÂàôÂêëÊú¨Âú∞ÊâßË°åÂÜôÂÖ•uuidÊìç‰Ωú
        const current_uuid = res.data.id
        localStorage.setItem('current_uuid',current_uuid);
        this.setState({saveState:true});
        {notifyRes('‰øùÂ≠òÊàêÂäü')};
      })
      .catch(err => {
        {notifyErr(err.message)};
      })
    }
  }

  // ÊñáÁ´†‰∏ä‰º†ÈÄªËæë
  onSubmit = async() => {
    //Á°ÆËÆ§Âπ∂Âà∑Êñ∞Áî®Êà∑ÁöÑ‰ø°ÊÅØ
    const accessToken = localStorage.getItem('access_token');
    await getUserInfo(accessToken);
    const {title, content} = this.state;
    //Êú¨Â§ÑÂ∞Üarticle_status‰øÆÊîπ‰∏∫trueÔºåÂç≥ÂèëË°®ÁöÑÊñáÁ´†
    const articleObj = {title:title, content:content, article_status:true};
    //Á°ÆËÆ§Êú¨Âú∞uuidÊòØÂê¶Â≠òÂú®
    if (localStorage.getItem('current_uuid')) {
      //uuidÂ≠òÂú®ÂàôÊâßË°åÊõ¥Êñ∞patchÊìç‰ΩúÔºåÂπ∂ÂèëÂ∏É
      const articleObj = {title:title, content:content, article_status:true};
      api.updateArticle(articleObj,localStorage.getItem('current_uuid'))
      .then(res => {
        //ÊàêÂäüÂàô‰ªéÂΩìÂâçlocalstorageÊäπÈô§uuidÔºåÂπ∂ÊâßË°åÈ°µÈù¢Ë∑≥ËΩ¨Ëá≥‰∏ªÈ°µ
        localStorage.removeItem('current_uuid')
        window.location = "/"
        {notifyRes('‰øùÂ≠òÊàêÂäü')};
      })
      .catch(err => {
        {notifyErr(err.message)};
      })
    } else {
      //uuid‰∏çÂ≠òÂú®ÂàôÁõ¥Êé•ÊâßË°åÂèëÂ∏ÉpostÊìç‰Ωú
      api.publishArticle(articleObj)
      .then(res => {
        //ÊàêÂäüÂàô‰ªéÂΩìÂâçlocalstorageÊäπÈô§uuidÔºåÂπ∂ÊâßË°åÈ°µÈù¢Ë∑≥ËΩ¨Ëá≥‰∏ªÈ°µ
        localStorage.removeItem('current_uuid')
        window.location = "/"
      })
      .catch(err => {
        {notifyErr(err.message)};
      })  
    }
  };

  render() {
    return (
      <div>
        <ToastContainer theme='dark'/>
        <Typography sx={{ fontSize: 25 }} color="text.secondary" gutterBottom>Âàõ‰Ωú</Typography>
          
          <Grid container>
            <Grid xs={6} sx={{display: 'flex', alignItems: 'center'}}>
              <Typography sx={{ fontSize: 25, display: 'flex', alignItems: 'center'}} color="text.secondary" marginBottom={0}>Ê†áÈ¢ò</Typography>
            </Grid>

            <Grid xs={6}>
              <Stack direction="row">
                <Grid>
                  {
                    this.state.saveState ?
                    <Fab variant="extended" size="medium" color="primary" aria-label="add" display='flex' disabled onClick={this.onSave}>
                      <SaveIcon/>
                        Â∑≤‰øùÂ≠ò
                    </Fab>
                    :
                    <Fab variant="extended" size="medium" color="primary" aria-label="add" display='flex' onClick={this.onSave}>
                      <SaveIcon/>
                        ‰øùÂ≠ò
                    </Fab>
                  }
                </Grid>
                <Grid >
                  <Fab variant="extended" size="medium" color="primary" aria-label="add" onClick={this.onSubmit}>
                    <PublishIcon/>
                    ÂèëË°®
                  </Fab>
                </Grid>
              </Stack>
            </Grid>
            <Grid  xs={12}>
              <TextField
                required
                id="title"
                label="Ê†áÈ¢ò"
                defaultValue="Ê†áÈ¢ò"
                sx={{ width: 1046 }}
                onChange={this.handleTitleChange}
              />
          </Grid>
          </Grid>
        
        <Grid container>
          <Grid>
            <Typography sx={{ fontSize: 25 }} color="text.secondary" gutterBottom>ÂÜÖÂÆπ</Typography>
            <Editor
                id={"tincyEditor"}
                tinymceScriptSrc={'/tinymce/tinymce.min.js'}
                apiKey="sm8q2x4neqknwx5kpfjtnhx7hrbvpsdf58irtkd8fyjrhvtg"
                init={{
                plugins: 'autosave',
                autosave_ask_before_unload: false,
                image_advtab: true,
                convert_urls: false,
                language: 'zh_CN',
                width: 1046,
                min_height: 716,
                plugins: 'preview searchreplace autolink directionality visualblocks visualchars fullscreen image link template code codesample table charmap hr pagebreak nonbreaking anchor insertdatetime advlist lists wordcount imagetools textpattern help emoticons autosave autoresize formatpainter paste',
                toolbar: 'code undo redo restoredraft | cut copy paste pastetext | forecolor backcolor bold italic underline strikethrough link anchor | alignleft aligncenter alignright alignjustify outdent indent | styleselect formatselect fontselect fontsizeselect | bullist numlist | blockquote subscript superscript removeformat | table image media charmap emoticons hr pagebreak insertdatetime print preview | fullscreen | bdmap indent2em lineheight formatpainter axupimgs',
                fontsize_formats: '12px 14px 16px 18px 24px 36px 48px 56px 72px',
                paste_data_images: true,
                //ÁºñËæëËøáÁ®ã‰∏≠ÂõæÁâá‰∏ä‰º†ÈÄªËæë
                images_upload_handler: (blobInfo, success, failure)=> new Promise((resolve,reject) =>{
                    if (blobInfo.blob()) {
                      const formData = new FormData();
                      formData.append('images',blobInfo.blob(),blobInfo.filename());
                      api.uploadArticleImage(formData)
                      .then((res) => {
                        if(res.data.images){
                          //ÊàêÂäü‰∏ä‰º†ÂêéÂ∞ÜÂõæÁâáÊèíÂÖ•Âà∞ÂΩìÂâçÁöÑÁºñËæëÂô®‰∏≠
                          console.log(res.data.images);
                          console.log('success', success);
                          const imgURL = APP_API_URL.slice(0,-1) + res.data.images
                          success(imgURL);
                          resolve(imgURL);
                          {notifyRes('ÂõæÁâá‰øùÂ≠òÊàêÂäü')};
                        }
                      })
                      .catch((error) => {
                        {notifyErr(error.message)}
                      })
                    } else {
                      {notifyErr('error')}
                    }
                  })
                }
                }
                onEditorChange = {this.handleEditorChange}
            />
          </Grid>
        </Grid>
      </div>
    )
  }
}